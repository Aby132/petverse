#!/usr/bin/env node

/**
 * Update AWS Configuration Script
 * This script reads the cognito-config.json file and updates the aws-config.js file
 */

const fs = require('fs');
const path = require('path');

const CONFIG_FILE = 'cognito-config.json';
const AWS_CONFIG_FILE = 'src/aws-config.js';
const APP_FILE = 'src/App.js';

console.log('üîß Updating AWS configuration...');

// Check if config file exists
if (!fs.existsSync(CONFIG_FILE)) {
    console.error('‚ùå cognito-config.json not found. Please run the setup script first.');
    process.exit(1);
}

// Read configuration
const config = JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'));

console.log('üìñ Reading configuration from cognito-config.json');
console.log(`   Region: ${config.region}`);
console.log(`   User Pool ID: ${config.userPoolId}`);
console.log(`   Client ID: ${config.userPoolClientId}`);

// Update aws-config.js
const awsConfigContent = `// AWS Amplify v6 Configuration
// Auto-generated by setup-cognito script

const awsConfig = {
  Auth: {
    Cognito: {
      // Amazon Cognito Region
      region: '${config.region}',
      
      // Amazon Cognito User Pool ID
      userPoolId: '${config.userPoolId}',
      
      // Amazon Cognito Web Client ID
      userPoolClientId: '${config.userPoolClientId}',
      
      // Amazon Cognito Identity Pool ID
      identityPoolId: '${config.identityPoolId}',
      
      // Sign up verification method
      signUpVerificationMethod: 'code',
      
      // Authentication flow type
      authenticationFlowType: 'USER_SRP_AUTH'
    }
  }
};

export default awsConfig;

// Setup completed on: ${new Date().toISOString()}
// Admin user: ${config.adminUser.email}
// Admin password: ${config.adminUser.password}
`;

fs.writeFileSync(AWS_CONFIG_FILE, awsConfigContent);
console.log('‚úÖ Updated src/aws-config.js');

// Update App.js to use real authentication
let appContent = fs.readFileSync(APP_FILE, 'utf8');

// Replace mock auth imports with real auth imports
appContent = appContent.replace(
    /\/\/ import { Amplify } from 'aws-amplify';/g,
    "import { Amplify } from 'aws-amplify';"
);

appContent = appContent.replace(
    /\/\/ import { AuthProvider } from '\.\/contexts\/AuthContext';/g,
    "import { AuthProvider } from './contexts/AuthContext';"
);

appContent = appContent.replace(
    /import { AuthProvider } from '\.\/contexts\/MockAuthContext'; \/\/ Using mock for development/g,
    "// import { AuthProvider } from './contexts/MockAuthContext'; // Using mock for development"
);

appContent = appContent.replace(
    /\/\/ import awsConfig from '\.\/aws-config';/g,
    "import awsConfig from './aws-config';"
);

appContent = appContent.replace(
    /\/\/ Configure AWS Amplify \(commented out for development with mock auth\)/g,
    "// Configure AWS Amplify"
);

appContent = appContent.replace(
    /\/\/ Amplify\.configure\(awsConfig\);/g,
    "Amplify.configure(awsConfig);"
);

fs.writeFileSync(APP_FILE, appContent);
console.log('‚úÖ Updated src/App.js to use real AWS authentication');

// Create environment file
const envContent = `# AWS Cognito Configuration
# Auto-generated by setup-cognito script

REACT_APP_AWS_REGION=${config.region}
REACT_APP_USER_POOL_ID=${config.userPoolId}
REACT_APP_USER_POOL_CLIENT_ID=${config.userPoolClientId}
REACT_APP_IDENTITY_POOL_ID=${config.identityPoolId}

# Admin credentials for testing
REACT_APP_ADMIN_EMAIL=${config.adminUser.email}
REACT_APP_ADMIN_PASSWORD=${config.adminUser.password}
`;

fs.writeFileSync('.env.local', envContent);
console.log('‚úÖ Created .env.local with configuration');

// Create a backup of the mock auth context
if (!fs.existsSync('src/contexts/MockAuthContext.js.backup')) {
    fs.copyFileSync('src/contexts/MockAuthContext.js', 'src/contexts/MockAuthContext.js.backup');
    console.log('‚úÖ Created backup of MockAuthContext.js');
}

console.log('');
console.log('üéâ Configuration update completed!');
console.log('');
console.log('üìã Summary:');
console.log('===========');
console.log('‚úÖ aws-config.js updated with real AWS credentials');
console.log('‚úÖ App.js switched to use real AWS authentication');
console.log('‚úÖ .env.local created with environment variables');
console.log('‚úÖ MockAuthContext.js backed up');
console.log('');
console.log('üß™ Test Credentials:');
console.log(`   Email: ${config.adminUser.email}`);
console.log(`   Password: ${config.adminUser.password}`);
console.log(`   Role: ${config.adminUser.role}`);
console.log('');
console.log('üöÄ Next Steps:');
console.log('1. Restart your development server: npm start');
console.log('2. Test login with the admin credentials above');
console.log('3. Register new users through the app');
console.log('4. Verify role-based routing works correctly');
console.log('');
console.log('üîÑ To switch back to mock authentication:');
console.log('   node scripts/use-mock-auth.js');
